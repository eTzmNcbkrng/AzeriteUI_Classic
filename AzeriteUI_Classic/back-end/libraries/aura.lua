local LibAura = CogWheel:Set("LibAura", 10)
if (not LibAura) then	
	return
end

local LibMessage = CogWheel("LibMessage")
assert(LibMessage, "LibAura requires LibMessage to be loaded.")

local LibEvent = CogWheel("LibEvent")
assert(LibEvent, "LibAura requires LibEvent to be loaded.")

local LibFrame = CogWheel("LibFrame")
assert(LibFrame, "LibAura requires LibFrame to be loaded.")

LibMessage:Embed(LibAura)
LibEvent:Embed(LibAura)
LibFrame:Embed(LibAura)

-- Lua API
local _G = _G
local assert = assert
local bit_band = bit.band
local bit_bor = bit.bor
local date = date
local debugstack = debugstack
local error = error
local pairs = pairs
local select = select
local string_byte = string.byte
local string_find = string.find
local string_gsub = string.gsub
local string_join = string.join
local string_match = string.match
local string_sub = string.sub
local table_concat = table.concat
local tonumber = tonumber
local type = type

-- WoW API
local GetSpellInfo = _G.GetSpellInfo
local UnitAura = _G.UnitAura
local UnitIsUnit = _G.UnitIsUnit

-- WoW Constants
local BUFF_MAX_DISPLAY = _G.BUFF_MAX_DISPLAY
local DEBUFF_MAX_DISPLAY = _G.DEBUFF_MAX_DISPLAY 

-- Library registries
LibAura.embeds = LibAura.embeds or {}
LibAura.auraWatches = LibAura.auraWatches or {} -- currently tracked units
LibAura.auras = LibAura.auras or {} -- static aura flag cache
LibAura.cache = LibAura.cache or {} -- current unit aura cache
LibAura.infoFlags = LibAura.infoFlags or {} -- static info flags about the auras
LibAura.userFlags = LibAura.userFlags or {} -- added user flags about the auras
LibAura.frame = LibAura.frame or LibAura:CreateFrame("Frame") -- frame tracking events and updates

-- Shortcuts
local Units = LibAura.auraWatches
local Auras = LibAura.auras
local Cache = LibAura.cache
local InfoFlags = LibAura.infoFlags
local UserFlags = LibAura.userFlags

-- Utility Functions
--------------------------------------------------------------------------
-- Syntax check 
local check = function(value, num, ...)
	assert(type(num) == "number", ("Bad argument #%.0f to '%s': %s expected, got %s"):format(2, "Check", "number", type(num)))
	for i = 1,select("#", ...) do
		if type(value) == select(i, ...) then 
			return 
		end
	end
	local types = string_join(", ", ...)
	local name = string_match(debugstack(2, 2, 0), ": in function [`<](.-)['>]")
	error(("Bad argument #%.0f to '%s': %s expected, got %s"):format(num, name, types, type(value)), 3)
end

-- Utility function to parse and order a filter, 
-- to make sure we avoid duplicate caches. 
local parseFilter = function(filter)
	
	-- speed it up for default situations
	if ((not filter) or (filter == "")) then 
		return "HELPFUL"
	end

	-- parse the string, ignore separator types and order
	local harmful = string_match(filter, "HARMFUL")
	local helpful = string_match(filter, "HELPFUL")
	local player = string_match(filter, "PLAYER") -- auras that were applied by the player
	local raid = string_match(filter, "RAID") -- auras that can be applied (if HELPFUL) or dispelled (if HARMFUL) by the player
	local cancelable = string_match(filter, "CANCELABLE") -- buffs that can be removed (such as by right-clicking or using the /cancelaura command)
	local not_cancelable = string_match(filter, "NOT_CANCELABLE") -- buffs that cannot be removed

	-- return a nil value for invalid filters. 
	-- *this might cause an error, but that is the intention.
	if (harmful and helpful) or (cancelable and not_cancelable) then 
		return 
	end

	-- always include these, as we're always using UnitAura() to retrieve buffs/debuffs.
	local parsedFilter
	if (harmful) then 
		parsedFilter = "HARMFUL"
	else 
		parsedFilter = "HELPFUL" -- default when no help/harm is mentioned
	end 

	-- return a parsed filter with arguments separated by spaces, and in our preferred order
	return parsedFilter .. (player and " PLAYER" or "") 
						.. (raid and " RAID" or "") 
						.. (cancelable and " CANCELABLE" or "") 
						.. (not_cancelable and " NOT_CANCELABLE" or "") 
end 

-- Aura tracking frame and event handling
--------------------------------------------------------------------------
local Frame = LibAura.frame
local Frame_MT = { __index = Frame }

-- Methods we don't wish to expose to the modules
local IsEventRegistered = Frame_MT.__index.IsEventRegistered
local RegisterEvent = Frame_MT.__index.RegisterEvent
local RegisterUnitEvent = Frame_MT.__index.RegisterUnitEvent
local UnregisterEvent = Frame_MT.__index.UnregisterEvent
local UnregisterAllEvents = Frame_MT.__index.UnregisterAllEvents

Frame.OnEvent = function(self, event, unit, ...)

	-- don't bother caching up anything we haven't got a registered aurawatch or cache for
	if (not Units[unit]) then 
		return 
	end 

	-- retrieve the unit's aura cache, bail out if none has been queried before
	local cache = Cache[unit]
	if (not cache) then 
		return 
	end 

	-- refresh all the registered filters
	for filter in pairs(cache) do 
		LibAura:CacheUnitAurasByFilter(unit, filter)
	end 

	-- Send a message to anybody listening
	LibAura:SendMessage("CG_UNIT_AURA", unit)
end

LibAura.CacheUnitBuffsByFilter = function(self, unit, filter)
	return self:CacheUnitAurasByFilter(unit, "HELPFUL" .. (filter or ""))
end 

LibAura.CacheUnitDebuffsByFilter = function(self, unit, filter)
	return self:CacheUnitAurasByFilter(unit, "HARMFUL" .. (filter or ""))
end 

LibAura.CacheUnitAurasByFilter = function(self, unit, filter)
	-- Parse the provided or create a default filter
	local filter = parseFilter(filter)
	if (not filter) then 
		return -- don't cache invalid filters
	end

	-- Enable the aura watch for this unit and filter if it hasn't been already
	-- This also creates the relevant tables for us. 
	if (not Units[unit]) or (not Cache[unit][filter]) then 
		LibAura:RegisterAuraWatch(unit, filter)
	end 

	-- Retrieve the aura cache for this unit and filter
	local cache = Cache[unit][filter]

	-- Figure out if this is a unit we can get more info about
	local queryUnit
	if (UnitIsUnit(unit, "player")) then 
		queryUnit = "player"
	elseif (UnitIsUnit(unit, "pet")) then 
		queryUnit = "pet"
	end

	local counter, limit = 0, string_match(filter, "HARMFUL") and DEBUFF_MAX_DISPLAY or BUFF_MAX_DISPLAY
	for i = 1,limit do 

		-- Retrieve buff information
		local name, icon, count, debuffType, duration, expirationTime, unitCaster, isStealable, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, value1, value2, value3 = UnitAura(queryUnit or unit, i, filter)

		-- No name means no more buffs matching the filter
		if (not name) then
			break
		end

		-- Cache up the values for the aura index.
		-- *Only ever replace the whole table on its initial creation, 
		-- always reuse the existing ones at all other times. 
		-- This can fire A LOT in battlegrounds, so this is needed for performance and memory. 
		if (cache[i]) then 
			cache[i][1], 
			cache[i][2], 
			cache[i][3], 
			cache[i][4], 
			cache[i][5], 
			cache[i][6], 
			cache[i][7], 
			cache[i][8], 
			cache[i][9], 
			cache[i][10], 
			cache[i][11], 
			cache[i][12], 
			cache[i][13], 
			cache[i][14], 
			cache[i][15], 
			cache[i][16], 
			cache[i][17], 
			cache[i][18] = name, icon, count, debuffType, duration, expirationTime, unitCaster, isStealable, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, value1, value2, value3
		else 
			cache[i] = { name, icon, count, debuffType, duration, expirationTime, unitCaster, isStealable, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, value1, value2, value3 }
		end 

		counter = counter + 1
	end 

	-- Clear out old, if any
	local numAuras = #cache
	if (numAuras > counter) then 
		for i = counter+1,numAuras do 
			for j = 1,#cache[i] do 
				cache[i][j] = nil
			end 
		end
	end
	
	-- return cache and aura count for this filter and unit
	return cache, counter
end

-- retrieve a cached filtered aura list for the given unit
LibAura.GetUnitAuraCacheByFilter = function(self, unit, filter)
	return Cache[unit] and Cache[unit][filter] or LibAura:CacheUnitAurasByFilter(unit, filter)
end

LibAura.GetUnitBuffCacheByFilter = function(self, unit, filter)
	local realFilter = "HELPFUL" .. (filter or "")
	return Cache[unit] and Cache[unit][realFilter] or LibAura:CacheUnitAurasByFilter(unit, realFilter)
end

LibAura.GetUnitDebuffCacheByFilter = function(self, unit, filter)
	local realFilter = "HARMFUL" .. (filter or "")
	return Cache[unit] and Cache[unit][realFilter] or LibAura:CacheUnitAurasByFilter(unit, realFilter)
end

LibAura.GetUnitAura = function(self, unit, auraID, filter)
	local cache = self:GetUnitAuraCacheByFilter(unit, filter)
	local aura = cache and cache[auraID]
	if aura then 
		return aura[1], aura[2], aura[3], aura[4], aura[5], aura[6], aura[7], aura[8], aura[9], aura[10], aura[11], aura[12], aura[13], aura[14], aura[15], aura[16], aura[17], aura[18]
	end 
end

LibAura.GetUnitBuff = function(self, unit, auraID, filter)
	local cache = self:GetUnitBuffCacheByFilter(unit, filter)
	local aura = cache and cache[auraID]
	if aura then 
		return aura[1], aura[2], aura[3], aura[4], aura[5], aura[6], aura[7], aura[8], aura[9], aura[10], aura[11], aura[12], aura[13], aura[14], aura[15], aura[16], aura[17], aura[18]
	end 
end

LibAura.GetUnitDebuff = function(self, unit, auraID, filter)
	local cache = self:GetUnitDebuffCacheByFilter(unit, filter)
	local aura = cache and cache[auraID]
	if aura then 
		return aura[1], aura[2], aura[3], aura[4], aura[5], aura[6], aura[7], aura[8], aura[9], aura[10], aura[11], aura[12], aura[13], aura[14], aura[15], aura[16], aura[17], aura[18]
	end 
end

LibAura.RegisterAuraWatch = function(self, unit, filter)
	check(unit, 1, "string")

	-- set the tracking flag for this unit
	Units[unit] = true

	-- create the relevant tables
	-- this is needed for the event handler to respond 
	-- to blizz events and cache up the relevant auras.
	if (not Cache[unit]) then 
		Cache[unit] = {}
	end 
	if (not Cache[unit][filter]) then 
		Cache[unit][filter] = {}
	end 

	-- register the main event with our event frame, if it hasn't been already
	if (not IsEventRegistered(Frame, "UNIT_AURA")) then
		RegisterEvent(Frame, "UNIT_AURA")
	end
end

LibAura.UnregisterAuraWatch = function(self, unit, filter)
	check(unit, 1, "string")

	-- clear the tracking flag for this unit
	Units[unit] = false

	-- check if anything is still tracked
	for unit,tracked in pairs(Units) do 
		if (tracked) then 
			return 
		end 
	end 

	-- if we made it this far, we're not tracking anything
	UnregisterEvent(Frame, "UNIT_AURA")
end

--------------------------------------------------------------------------
-- InfoFlag queries
--------------------------------------------------------------------------
-- Not a fan of this in the slightest, 
-- but for purposes of speed we need to hand this table out to the modules. 
-- and in case of library updates we need this table to be the same,
LibAura.GetAllAuraInfoFlags = function(self)
	return Auras
end

-- Return the hashed info flag table, 
-- to allow easy usage of keywords in the modules.
-- We will have make sure the keywords remain consistent.  
LibAura.GetAllAuraInfoBitFilters = function(self)
	return InfoFlags
end

-- Check if the provided info flags are set for the aura
LibAura.HasAuraInfoFlags = function(self, spellID, flags)
	-- Not verifying input types as we don't want the extra function calls on 
	-- something that might be called multiple times each second. 
	return Auras[spellID] and (bit_band(Auras[spellID], flags) ~= 0)
end

-- Retrieve the current info flags for the aura, or nil if none are set
LibAura.GetAuraInfoFlags = function(self, spellID)
	-- Not verifying input types as we don't want the extra function calls on 
	-- something that might be called multiple times each second. 
	return Auras[spellID]
end

--------------------------------------------------------------------------
-- UserFlags
-- The flags set here are registered per module, 
-- and are to be used for the front-end's own purposes, 
-- whether that be display preference, blacklists, whitelists, etc. 
-- Nothing here is global, and all is separate from the InfoFlags.
--------------------------------------------------------------------------
-- Adds a custom aura flag
LibAura.AddAuraUserFlags = function(self, spellID, flags)
	check(spellID, 1, "number")
	check(flags, 2, "number")
	if (not UserFlags[self]) then 
		UserFlags[self] = {}
	end 
	if (not UserFlags[self][spellID]) then 
		UserFlags[self][spellID] = flags
		return 
	end 
	UserFlags[self][spellID] = bit_bor(UserFlags[self][spellID], flags)
end 

-- Retrieve the current set flags for the aura, or nil if none are set
LibAura.GetAuraUserFlags = function(self, spellID)
	-- Not verifying input types as we don't want the extra function calls on 
	-- something that might be called multiple times each second. 
	if (not UserFlags[self]) or (not UserFlags[self][spellID]) then 
		return 
	end 
	return UserFlags[self][spellID]
end

-- Return the full user flag table for the module
LibAura.GetAllAuraUserFlags = function(self)
	return UserFlags[self]
end

-- Check if the provided user flags are set for the aura
LibAura.HasAuraUserFlags = function(self, spellID, flags)
	-- Not verifying input types as we don't want the extra function calls on 
	-- something that might be called multiple times each second. 
	if (not UserFlags[self]) or (not UserFlags[self][spellID]) then 
		return 
	end 
	return (bit_band(UserFlags[self][spellID], flags) ~= 0)
end

-- Remove a set of user flags, or all if no removalFlags are provided.
LibAura.RemoveAuraUserFlags = function(self, spellID, removalFlags)
	check(spellID, 1, "number")
	check(removalFlags, 2, "number", "nil")
	if (not UserFlags[self]) or (not UserFlags[self][spellID]) then 
		return 
	end 
	local userFlags = UserFlags[self][spellID]
	if removalFlags  then 
		local changed
		for i = 1,64 do -- bit.bits ? 
			local bit = (i-1)^2 -- create a mask 
			local userFlagsHasBit = bit_band(userFlags, bit) -- see if the user filter has the bit set
			local removalFlagsHasBit = bit_band(removalFlags, bit) -- see if the removal flags has the bit set
			if (userFlagsHasBit and removalFlagsHasBit) then 
				userFlags = userFlags - bit -- just simply deduct the masked bit value if it was set
				changed = true 
			end 
		end 
		if (changed) then 
			UserFlags[self][spellID] = userFlags
		end 
	else 
		UserFlags[self][spellID] = nil
	end 
end 


local spellRanks = table_concat(
{
	".........1......1...................................1.............1....1...1.1..........1....2....111...........11.1.1.1.1......",
	"....1..1..1...2.3......................1...1......1.........................2......................2.................1..........",
	"...........................23......................1......1........12.....12......1........1................1....1..............",
	"..................1....1............1.............................1.1..1........1.1........111.1212211111211123111..23.2.1.2...2",
	".21.11227.....1.2.211111122111122.3321...2..213221613321212.31211.......1111112212.1232313.111.111122112112313.3131121341.11..2.",
	".13.2.311151122241113233.............214....111.1....122..21.111312.31..211..111221121121123122321.1.....11.......1..1....1211..",
	"31.1.1.1.21212.11111111122221.23..................111...............33.222.211.1.13214.322.622.122.3.4.2.1.3.115.6...2...5.1.2.1",
	"..33332233.133.3444431.1.144.2.1.22.2441.451..5544442155..41.562.4.3.11.233111311.311.44435223344.2222232.2554411111122.1..2211.",
	"244.3.35121.1.1..55.1...3.111...222..2211...33...333..1..1..3224422.133.413.1...35122.2.215.1..13...21...1...1.1.....1...123411.",
	"2.....21..1234.1....221.1...234.1...112211.1.3.3.......21.3.21..2.3.2.2.2..2............1.1231231231341231234123111...12..232312",
	"1212..12..111..124145.12312312312311.123...2323...1.1.....12..12.........4564545..444.123....123....2321.4..121.12....1....2.45.",
	".....123...1231.1..1233231121.1....11..11....1234.123.11..1....12341234.11..1....112..1...1.........11..1..1...........1......1.",
	".......12...1..1..........21..11..11345....123................1.....1234545.......................1....1....2..3................",
	"......23..123....................1...1....1......111..................2121...1....1234512345234512345123451234512..12..1234.1234",
	"..................1..........123.512321..2..1.2..........1..1..1212......3.....123135112.......1234.....12......12.1..1.45......",
	"....................1.1.1...1..........1.....1...........11.....1.................11.1.1.22.11.22..............................3",
	"31123122312113..113422....11.............4545..111................1111112.112..........123.1123.................................",
	"................................................................................................................................",
	"................................................................................................................................",
	"..........................23..2.....23.........1..............5512354..........12345....................1.......................",
	"......................111.1.2341234..........213451234512..12.............1.1.....1.....1.11........................1123452345..",
	"...1....1123452345.........................................................11.5444545......11.2..2....4.4...1.52...2.......1....",
	".12...123451......1.2.....12......1..1.1...343455121..1..11..1........4541...23..1.........1.1.1.1.11.34................3.3.4411",
	"111112..............1.......115671112311........................871.................22...11234123411.211............234623123123",
	"123.14234123111241232312311..........12...........................1414.....................................................1....",
	".........121231212............1...................................34............................................................",
	".........................11........1...........................................1122........1212.........234.....................",
	".........66....666............1.............................................................4........111........................",
	"............6611.....1....................661...............................3434.8455....11......2.1.4.1.112412212342341234..1..",
	"2..1......51.1145111111.13261.661244.225.........................................................1..........................1...",
	"................................................................................................................................",
	"....................................................................................................................1...........",
	"..........123.4124323456782345678.........................................12345678123456781234567812345678.12345.67812345678.123",
	"4567812345678.........12345678123456781234567812345678........2212121212121212312312312.3..............1231231231456782345678123",
	"456781234567811234567823456781123456782345678112211221122112211231123232.112323.112.32311234567823456781123456782345678112345678",
	"23456781123456782345678.............234.234...23456785678..234567811112345678234567823456782345678123456782345678234567823456782",
	"34567823456782345678..2345678234567812345678123456781234567812345678.1123.456.782345678.1123456.7823456781.123456782345678......",
	"..............232312323112323............1122....221122112211221122.....12323...123456782345678112345678234567811234567823456781",
	"1234567823456781123456782345678121211221122.......112323112323..................................................................",
	"..................................9ABCDEF9ABCDEF9ABCDEF9ABDEFC9ABCDEF9BCDEFA9ABCDEF9ABCDEF.9ABCDEF9ABCDEF....1.................1",
	"1111111111.......11...123123..1..12345........1...1..41123452345123452134534122.3.34.....111.11111..1111.....21224311112222....1",
	"....1.1..1..........11.1111....12.1.123.2345.234511...1211113124.......111111............1.9ABCDEF.9ABCDEF9ABCDEF.1123423412345.",
	"...........22122.1.1...1....1.....................G9ABCDE..............9ABCDE1239ABCDE12312339ABCDEF12321231.1..9ABCDE.123.....1",
	"2311123.F..9ABCDEF.12312312.9ABCDEF123..1239ABCDEF1239ABCDEF23..61612233345454.11232323..12312222323.2..323.123232.12....12.2234",
	"56789ABCDEF23.312123456789ABCDEF.....111..1111...345678345678..1......111...1.....123....1.231211111111111.11123456789ABCDEF12.1",
	"11121231456789ABCDEF.11..1234567845645612345678....123412339A49A34123412311.23234349A9A1123234341.......1123234349AA9341123.234.",
	"..9A34.11234239A3411.23423.111349A1234123349A112323412341234...12345671234567...112323456.71123234567...........1234....123412..",
	".........123..12.12341..626.............133666345656223412345623456.23456789A112231112345678A2239..113111322..444433123123222211",
	".2222.11263456234511234.5234523232.2...2222..2233...........33123123223333221232322.1111...................................1....",
	".......1234.15....2345............1...1.12345....2345..1.12345....234512..1..2341......121234.234523452435234.2312.2.234234.2342",
	"34......1............1...........1........12345.1....2345................1...................1............1.....1111............",
	".............4411234234112323112323112233111122.......................................................12..1.334.4333..1...1.....",
	"..1.............11....................................11...........1.1.1....11111.33...............3...234234..22122222..6666422",
	"112.121.22...2222....1123123....................................................................................................",
	".......21.....1............11.......1.......1..1.234566.22....2344232.32323....21222222.1.........................234234........",
	"............................................................3...1..1...................222......1.................1......1..1...",
	".........1...................5555.6789678966.................1234512435123451234512345.............123..1..............1.1...1.1",
	"1..231.................214441111111..........1....................1..1..2112323.4233.1.111...23231.....22331221.................",
	"................................................................................................................................",
	"........................................................................................66...44441444....23231.111..............",
	"...............................................11..................................1..................................2345.23123",
	"23412123............1..2345...................................123231232.1234112.2............................11......56....11...",
	"..1....................1.............1....................11...1...1771223322...123123.111223323111.222..11234234112323112211...",
	"2....1111.111........1....11123123...2345623456123123123111221111122155....1......1..111.232323232323.........1..1..111111111112",
	"222..2111..3434...1....1..........1.111111222........4.222221.4....1.11111..........1..........23231.......................2323.",
	"...........................1111.......................1....33.....2222......1..567567567567454545544534.34331.....1.234234123423",
	"42323.2223232323..............2342.34234...222323232323232323..11111............................................................",
	"................1..1.3.................1....6656561.3323423433232322..112323.....................1.1.11111..22233.3222222..12...",
	".......1........5.523.23.......1...................................................4.....................3.4.....4.22.2323......",
	"..111....................................1...23.......................777755.77..44..2.211.2345672345671123452345...23423422....",
	"...........44234234...33...111.33.1111122...1111..........................1.....................1...............................",
	"...........................................1...................................................................1................",
	"....1111.........1......................2.......................................................................................",
	"........................................................................................4..................11..................2",
	"34234...6..122...332323..................................................................................2323..........44.......",
	"...............................11...............................................................................................",
	"....1..11..11...554436644445588.......................................1.....................22222333454589A89A89A89A343445556567",
	"89789343434345656.5656.676767679A9A33556655.33.44.455688333............................................................1........",
	"................................33.................................2....34......................................................",
	".........................567567565689AB89AB4553453453434343445454489A89A456456456456667756565675676767565634344455...443344.....",
	"............................45456744.3345454564562467246723452345334433456456232.223333787878784545...6........................1",
	"......................787889894145456456456567567.67675656565667675656564443444545.....333.4545454564563434232323..3.3.3..2.3423",
	"4..............2.34.....3.33.3.3.....23.23.23.....................................2342342342342323111232323.4.2223332323.....232",
	"3222............................................................................................................................",
	"............................................1........................................78..................................3453453",
	"43423333344678678789A789A...222323567567......789789787856565656789789563333233344234...........................................",
	"................56.........................................1111......1.2..1.1........11....1..1....1....1.1...12...1............",
	"..............1........1....1....1....1....1....1...11......454522....1.11..1........1.........1....1....1....1....1..1......1..",
	"..4564564564566786784545565678783378784434545454545453........1.2.....456456456456......343434134....1234511....................",
	".....3333...........123..........1..........................................432.................................................",
	"..................1.........4565634534523235678..785675673356563434456456..45454545343434.......................................",
	"..........7897895567675656443434232323456456567567565634345656456456442223232323....3453452323...................676745454545565",
	"64564563434.................................................1...................................................................",
	"................................................................................................................................",
	"..................1.............................................................................................................",
	".11.1........4444.4..................1..................................................................................11.11111",
	"11...11.1111111...21..111...111111.1111.12.......2345345....23232.1.2345.................2...................345................",
	"..............................................23..2.3...2.2........1232323...1.23452345.2............23..345678.................",
	"................1.......243.52345.23...........23....2.345.222...................................................23...2323.2...2",
	"...2345.....1.........122..123451.23..2345........12345......................2345.......23452...............2.345..23.45....1123",
	"..22..3..232345..2..1..2342342345123452345...34522.2314523.451234533...234523451.....2..........................................",
	"...............31....2.234.152234521.123452345.......2345.............2345........34.56782345623453...2345672345672.2345........",
	".23..................1......................................................................................1...................",
	".................................1111234234234234...............................................................................",
	"...............................................................................................................1................",
	".........................................1.......11...................................1....1.........567567.23456782345678......",
	"................................................................................................................................",
	"........111.11.11.1................11.......1111.......2.1.................................234532.1.1.123452345....111..........",
	".......2..1.......345..23.452345..2...2.232....2..23...................1...........1............................................",
	".....1.12345.234523451111.231.1.........................................................................123452345234523234511212",
	"31212..1..23123.............1...12345.1........1...2..3451234511...22334455111223123123123123123....1....1...2..345.....2345....",
	"............................................1.12345234567823234232234.232345678234...232.23452345..2323..23232345623423....23456",
	"78232342322342323456783423223452.3.2323456....................................................23.4..........23..................",
	".......................................................111112345..1.............................................................",
	"................................................................................................................................",
	"......................1..11111.1..............22323222.2345234523452345..........................233............................",
	"........................................1..11....11.1..11..1111111.234567234567.................................................",
	"...............................2345223452232.2.23452345..214..........3....45....123.......2....................................",
	"..1123231.23..............................34567.......................................................9A9A......................",
	"....1...................1111823456711112111..........1....................23452234.521.3452345234523452345..........223453452.34",
	"52345..........................1..............1......................2345345.1.........2.3.2.34.5.67............................",
	"....................3.........................1...............................234............................1...1..............",
	"............3456....3456...1.1..................................................1............................................1..",
	".............................................................................1..................................................",
	"................................................................................................................................",
	"..................................11.1111.1.........................................11.1.1..............2345234523452345..2...2.",
	"22345......................23452345.........1..1111111111.1..11111.2.345234523452234523452345234523452.34522345345........111111",
	"1111111111....2345..234523452222323223232234523452345.56756767....................4.5656..56...45.4545..444.....................",
	"..444....42.345..............................................................12345....................1.2..312........45......1.",
	"123......................12345.2.12..1.....................1.....12345....................1.............1.......................",
	"................................................1.......66....................45..1..........12345.................112....3.4511",
	"45.145111111.1...........................2345123451212345.1234561231..2345..123451....1.112345..........633567............315451",
	"2.34512345..1234512..123..2345..1234512345.1212345123451.234511.2345.1.2...1.2345....1...............1212.1234..................",
	".........................12.3451.2345.1.23451234512345112233.............1.23451.1234512345..1234512............................",
	".1....................................345.......................................1...........1.234...1123456782345678............",
	"..............................2345.345...12.3...6...1.............23..1..22223333231........3456..........234234.3434...23...3..",
	"..................12345.....................................................12345.1.............................................",
	"........6.......................................................................................................................",
	"......................................................................11.............234234...........1........1.123451234512345",
	"1..2....34512345.123451.................2345.............23456234.56.1.11...........1.......................................1223",
	"456223122345....22......2.3.4....123451..1....1.................................................................................",
	"........................2.......1.......1....121....1.................12345..121212345121.1..............23456.223......2....123",
	"4512312...1.5.......................1....121..............111...........................1.....12345..111........................",
	".....1234..........................................................2........1...........21................................123...",
	"..........................12.1234545.............................................................12.345..45....1..234512345.....",
	"...............................................9.A....................................22........2323............................",
	"...1212312345.12123.12....................1..1........2345.12345.12312.....1..121234512..............................8668.......",
	"...112345.1.231...................................234562..3456234.............................................234234234.2323....",
	"...................................1...11.......................................................................................",
	"..............................................................................12345...12.34.5..1...........23..1................",
	"...........................1...23452.314567123452.345612345.23.45623452.3452345623456123213452122335445671.23456234561.234561234",
	"56123456.123456712345123456712345........12.3451212.1234512345................1....2345123451234512.345..1...2234563456......123",
	"45..12.12345.....111111..11.1.23451.23...1231...1112345.....................................123123451212345........1212..11...12",
	"345..1.2345..123451.234512435.11234512345.....................21.2.23423.1.41234................................................",
	"..................223344234111111....11..................................................................................2345623",
	"456......2.3452345...........12..1.1...........1..1111232323...232323.............................2345623456....................",
	".6543212123..............212366..........................................11123451......234512345..........................123451",
	"2345123451234512345212345.....1..2....34512345123451234511.......21.111111...12.1.2435111112122231212345...1123541.2345........1",
	"2.....111122123.1211234512311123123451234511.2.........23456782345678......3456634566..3456722345123.45..34523123544234234234232",
	"32323.12345...........1.345612345612345612341234561234....234523452.345.1234123412..2345678234566123451234123.....1123451.......",
	"...11.12345....3345121212......1...........................1..................4545......5.5.....................................",
	"231..2323...23........1..........................2.345........................................45.7....1.................22.....1",
	".12..3.23.4545...................554545452345.................1...A........................................................1....",
	"2345.67.............11111..2.323...2345623232312342.2345.34513232323456..3.2323234512343451232.3322345451.......................",
	".................................................................................1.......1111.......................1...........",
	"..........................................1....1..............1..11.............................................................",
	"................................................................................................111111..........................",
	"................................................................................................................................",
	"..............................................234.2.34.1.1.2..112.................1111.11111111111111111111111111...............",
	".....................................................................................................................1..........",
	"......................................................................3.................1212.....................1..............",
	"...................................................................1.1..........11....................1.................5.......",
	"..............................1111..............................................................................................",
	"................................................................................................................................",
	"................................................................................................................................",
	".................................................................................1..............................................",
	".......................................1111...........123.......................................................................",
	".................................................................................1...........................1...........1...232",
	"3...............1..1......................234234.........1........1.2.......34...............................12323..............",
	"...............................................12345............................................................1.1111..........",
	"..........................................................11..1.....2323................................112323...........112323.",
	".........................................1.......................................................1..............................",
	"...................................................................................................1.123.....................5..",
	"..............................1..23....................1234.....................................................................",
	"..............A86..............12345.............1..............................................................................",
	"..............3A................................................................................................................",
	".....................................444.4..............................1..........234...234.....................1234234........",
	"..........56..........88...............................1.................................................44.....................",
	"................................................123..123..........12323.........................................................",
	"...............................1.........1...63........4....................1234521123....3..45.....1234512.....................",
	".................................................................45..........1.......1.....68A.1......11..............2121134123",
	"4112323.......34...2.3.41.1234..2..34..1.1.1111.2..342342342342342341112342342342...123456789...1.11234567823456782.345678......",
	"23423422.3434.......4.4...312.321...................9A9A9A.A...11........................................1.1......3.............",
	"...............................................7................................................................................",
	"...........11................................................5....11.....................1....................2345..............",
	".......12345.23452345..........................2345623456..........................................................11...........",
	"....................................................1...........................................................................",
	".....................................................................9.67679.597B7B9.5.B.CA.8.7..5A5............................",
	"8854555A5967A.3355...................................6793A5597B7B.955BC8A87.....................................................",
	"..........................................................................................................................1.....",
	"...............................................................................................................38.8...........76",
	"54321176543211..1.....4.......2345...................1..........................1....1.6............5......2....................",
	".................................1...1....1..33.....1.2121122212...................B.......1451....12976679A53597B7B95.5BC8A875A",
	"5..2........1..................22345312........................................11...1....................1...1..................",
	"................................................................234....2342323..........55.......................1..............",
	"..........................................................................................................................71234.",
	"56......1.......................................................................................................................",
	"............................................................................12..................................................",
	"...........................111.............................................................................................1....",
	"................................................................................................................................",
	"................................................................................................................................",
	"................................................................................................................................",
	"................................................................................................................................",
	"................................................................................................................................",
	"................................................................................................................................",
	"........................................................3654...3....................89A724....2.26..335622.....63...............",
	"................................11116..................................................2................3.......................",
	"............12.....1..4564456.....1.1.2323..456....2..........1245451........................23.2323.......................12345",
	"................................................................................................................................",
	"................................................................................................................................",
	".............................................................................................................1.............1....",
	"...........................................2..........6.................................123456...............123................",
	".............1....23............................................................................................................",
	"...............................................2345............654477...........................................................",
	"..........1.....................................................................................................................",
	"..............................................................................................................4.................",
	"...................................................................12312....1...................................................",
	".....1.23........123..23.1.2.345...................................................1.12345................1...1.........2323....",
	"..1.2.312........3..21.....................66...................................................................................",
	".............................................................................................................................123",
	"1..2345.....................12.................................................4......................................1.........",
	"...................23.................A.........................................................................................",
	"................................................................................................................................",
	"................................................................................................................................",
	"................................................................................................................................",
	"...............................................................................1....1...........................................",
	"................................................................................................................................",
	"................................................................................................................................",
	"................................................................................................................................",
	"...............................................2.........................................32.....................................",
	"..............................................................................1231123452345123.1.2345...........................",
	"............123123123451.......1...........12123.....12345............12........................................................",
	".............................12........995.5....................................................................................",
	"................................................................................................................................",
	"......................1.........................................................................................................",
	"................................................................................................................................",
	"................................................................................................................................",
	"................................................................................................................................",
	"................................................................................................................................",
	"................................................................................................................................",
	"................................................................................................................................",
	"................................................................................................................................",
	"................................................................................................................................",
	"................................................................................................................................",
	"................................................................................................................................",
	"................................................................................................................................"
})
local rankTranslation = {
	[49] =  1, [50] =  2, [51] =  3, [52] =  4, [53] =  5, [54] =  6, [55] =  7, [56] =  8, [57] =  9, 
	[65] = 10, [66] = 11, [67] = 12, [68] = 13, [69] = 14, [70] = 15, [71] = 16, [72] = 17, [73] = 18, 
	[74] = 19, [75] = 20, [76] = 21, [77] = 22, [78] = 23, [79] = 24, [80] = 25, [81] = 26, [82] = 27
}

LibAura.GetSpellRank = function(self, spellID)
	if (type(spellID)=="number") then
		return rankTranslation[string_byte(spellRanks, spellID)]
	elseif (type(spellID) == "string") then
		local s = string_find(spellID, "%(")
		if (s) then
			local e = string_find(spellID,"%)", s)
			if (e) then
  				rank = string_sub(spellID, s+1, e-1)
				return rank
			 end
		 end
	end
end

-- Blizzard API: 
-- local name, rank, icon, castTime, minRange, maxRange, spellId = GetSpellInfo(spellId or "spellName"[, "spellRank"])
LibAura.GetSpellInfo = function(self, spellID, spellRank)
	local name, rank, icon, castTime, minRange, maxRange, spellId = GetSpellInfo(spellID)
	return name, rank or self:GetSpellRank(spellID), icon, castTime, minRange, maxRange, spellId
end

local embedMethods = {
	CacheUnitAurasByFilter = true,
	CacheUnitBuffsByFilter = true,
	CacheUnitDebuffsByFilter = true,
	GetUnitAura = true,
	GetUnitBuff = true,
	GetUnitDebuff = true,
	GetUnitAuraCacheByFilter = true,
	GetUnitBuffCacheByFilter = true, 
	GetUnitDebuffCacheByFilter = true, 
	RegisterAuraWatch = true,
	UnregisterAuraWatch = true,
	GetAllAuraInfoFlags = true, 
	GetAllAuraUserFlags = true, 
	GetAllAuraInfoBitFilters = true, 
	GetAuraInfoFlags = true, 
	HasAuraInfoFlags = true, 
	AddAuraUserFlags = true,
	GetAuraUserFlags = true,
	HasAuraUserFlags = true, 
	RemoveAuraUserFlags = true,
	GetSpellRank = true, 
	GetSpellInfo = true
}

LibAura.Embed = function(self, target)
	for method in pairs(embedMethods) do
		target[method] = self[method]
	end
	self.embeds[target] = true
	return target
end

-- Upgrade existing embeds, if any
for target in pairs(LibAura.embeds) do
	LibAura:Embed(target)
end

-- Important. Doh. 
Frame:UnregisterAllEvents()
Frame:SetScript("OnEvent", Frame.OnEvent)

--------------------------------------------------------------------------
-- InfoFlags
-- The flags in this DB should only describe factual properties 
-- of the auras like type of spell, what class it belongs to, etc. 
--------------------------------------------------------------------------

local IsPlayerSpell 	= tonumber("0000000000000000000000000000000000000000000000000000000000000001", 2) 
local IsRacialSpell 	= tonumber("0000000000000000000000000000000000000000000000000000000000000010", 2) 

-- 2nd return value from UnitClass(unit)
local DRUID 			= tonumber("0000000000000000000000000000000000000000000000000000000000000100", 2) 
local HUNTER 			= tonumber("0000000000000000000000000000000000000000000000000000000000001000", 2) 
local MAGE 				= tonumber("0000000000000000000000000000000000000000000000000000000000010000", 2) 
local PALADIN 			= tonumber("0000000000000000000000000000000000000000000000000000000000100000", 2) 
local PRIEST 			= tonumber("0000000000000000000000000000000000000000000000000000000001000000", 2) 
local ROGUE 			= tonumber("0000000000000000000000000000000000000000000000000000000010000000", 2) 
local SHAMAN 			= tonumber("0000000000000000000000000000000000000000000000000000000100000000", 2) 
local WARLOCK 			= tonumber("0000000000000000000000000000000000000000000000000000001000000000", 2) 
local WARRIOR 			= tonumber("0000000000000000000000000000000000000000000000000000010000000000", 2) 

-- 2nd return value from UnitRace(unit)
local Dwarf 			= tonumber("0000000000000000000000000000000000000000000000000000100000000000", 2) 
local Gnome 			= tonumber("0000000000000000000000000000000000000000000000000001000000000000", 2) 
local Human 			= tonumber("0000000000000000000000000000000000000000000000000010000000000000", 2) 
local NightElf 			= tonumber("0000000000000000000000000000000000000000000000000100000000000000", 2) 
local Orc 				= tonumber("0000000000000000000000000000000000000000000000001000000000000000", 2) 
local Scourge 			= tonumber("0000000000000000000000000000000000000000000000010000000000000000", 2) 
local Tauren 			= tonumber("0000000000000000000000000000000000000000000000100000000000000000", 2) 
local Troll 			= tonumber("0000000000000000000000000000000000000000000001000000000000000000", 2) 
local Worgen 			= tonumber("0000000000000000000000000000000000000000000010000000000000000000", 2) 

local IsCrowdControl 	= tonumber("0000000000000000000000000000000000000000000100000000000000000000", 2) 
local IsRoot 			= tonumber("0000000000000000000000000000000000000000001000000000000000000000", 2) 
local IsSnare 			= tonumber("0000000000000000000000000000000000000000010000000000000000000000", 2) 
local IsSilence 		= tonumber("0000000000000000000000000000000000000000100000000000000000000000", 2) 
local IsStun 			= tonumber("0000000000000000000000000000000000000001000000000000000000000000", 2) 
local IsImmune			= tonumber("0000000000000000000000000000000000000010000000000000000000000000", 2) 
local IsImmuneSpell 	= tonumber("0000000000000000000000000000000000000100000000000000000000000000", 2) 
local IsImmunePhysical 	= tonumber("0000000000000000000000000000000000001000000000000000000000000000", 2) 
local IsDisarm 			= tonumber("0000000000000000000000000000000000010000000000000000000000000000", 2) 

local IsFood 			= tonumber("0000000000000000000000000000001000000000000000000000000000000000", 2)
local IsFlask 			= tonumber("0000000000000000000000000000010000000000000000000000000000000000", 2) 

InfoFlags.IsPlayerSpell = IsPlayerSpell
InfoFlags.IsRacialSpell = IsRacialSpell

InfoFlags.DRUID = DRUID
InfoFlags.HUNTER = HUNTER
InfoFlags.MAGE = MAGE
InfoFlags.PALADIN = PALADIN
InfoFlags.PRIEST = PRIEST
InfoFlags.ROGUE = ROGUE
InfoFlags.SHAMAN = SHAMAN
InfoFlags.WARLOCK = WARLOCK
InfoFlags.WARRIOR = WARRIOR

InfoFlags.Dwarf = Dwarf
InfoFlags.Gnome = Gnome
InfoFlags.Human = Human
InfoFlags.NightElf = NightElf
InfoFlags.Orc = Orc
InfoFlags.Scourge = Scourge
InfoFlags.Tauren = Tauren
InfoFlags.Troll = Troll

InfoFlags.IsCrowdControl = IsCrowdControl
InfoFlags.IsRoot = IsRoot
InfoFlags.IsSnare = IsSnare
InfoFlags.IsSilence = IsSilence
InfoFlags.IsStun = IsStun
InfoFlags.IsImmune = IsImmune
InfoFlags.IsImmuneSpell = IsImmuneSpell
InfoFlags.IsImmunePhysical = IsImmunePhysical
InfoFlags.IsDisarm = IsDisarm
InfoFlags.IsFood = IsFood
InfoFlags.IsFlask = IsFlask

-- For convenience farther down the list here
local IsDruid = IsPlayerSpell + DRUID
local IsHunter = IsPlayerSpell + HUNTER
local IsMage = IsPlayerSpell + MAGE
local IsPaladin = IsPlayerSpell + PALADIN
local IsPriest = IsPlayerSpell + PRIEST
local IsRogue = IsPlayerSpell + ROGUE
local IsShaman = IsPlayerSpell + SHAMAN
local IsWarlock = IsPlayerSpell + WARLOCK
local IsWarrior = IsPlayerSpell + WARRIOR

local IsDwarf = IsRacialSpell + Dwarf
local IsGnome = IsRacialSpell + Gnome
local IsHuman = IsRacialSpell + Human
local IsNightElf = IsRacialSpell + NightElf
local IsOrc = IsRacialSpell + Orc
local IsScourge = IsRacialSpell + Scourge
local IsTauren = IsRacialSpell + Tauren
local IsTroll = IsRacialSpell + Troll
local IsWorgen = IsRacialSpell + Worgen

-- Add flags to or create the cache entry
-- This is to avoid duplicate entries removing flags
local AddFlags = function(spellID, flags)
	if (not Auras[spellID]) then 
		Auras[spellID] = flags
		return 
	end 
	Auras[spellID] = bit_bor(Auras[spellID], flags)
end

------------------------------------------------------------------------
------------------------------------------------------------------------
---- 					CROWD CONTROL: CLASSES
------------------------------------------------------------------------
------------------------------------------------------------------------

-- Druid
do 
	AddFlags( 33786, IsDruid + IsCrowdControl) -- Cyclone
	AddFlags(209753, IsDruid + IsCrowdControl) -- Cyclone
	AddFlags(    99, IsDruid + IsCrowdControl) -- Incapacitating Roar
	AddFlags(236748, IsDruid + IsCrowdControl) -- Intimidating Roar
	AddFlags(163505, IsDruid + IsCrowdControl) -- Rake
	AddFlags( 22570, IsDruid + IsCrowdControl + IsStun) -- Maim
	AddFlags(203123, IsDruid + IsCrowdControl + IsStun) -- Maim
	AddFlags(203126, IsDruid + IsCrowdControl + IsStun) -- Maim (pvp honor talent)
	AddFlags(236025, IsDruid + IsCrowdControl + IsStun) -- Enraged Maim (pvp honor talent)
	AddFlags(  5211, IsDruid + IsCrowdControl + IsStun) -- Mighty Bash
	AddFlags( 81261, IsDruid + IsCrowdControl + IsSilence) -- Solar Beam
	AddFlags(   339, IsDruid + IsCrowdControl + IsRoot) -- Entangling Roots
	AddFlags(235963, IsDruid + IsCrowdControl + IsRoot) -- Entangling Roots (Earthen Grasp - feral pvp talent, -80% hit chance)
	AddFlags( 45334, IsDruid + IsCrowdControl + IsRoot) -- Immobilized (Wild Charge - Bear)
	AddFlags(102359, IsDruid + IsCrowdControl + IsRoot) -- Mass Entanglement
	AddFlags( 50259, IsDruid + IsCrowdControl + IsSnare) -- Dazed (Wild Charge - Cat)
	AddFlags( 58180, IsDruid + IsCrowdControl + IsSnare) -- Infected Wounds
	AddFlags( 61391, IsDruid + IsCrowdControl + IsSnare) -- Typhoon
	AddFlags(127797, IsDruid + IsCrowdControl + IsSnare) -- Ursol's Vortex
	AddFlags( 50259, IsDruid + IsCrowdControl + IsSnare) -- Wild Charge (Dazed)
	AddFlags(102543, IsDruid + IsCrowdControl) -- Incarnation: King of the Jungle
	AddFlags(106951, IsDruid + IsCrowdControl) -- Berserk
	AddFlags(102558, IsDruid + IsCrowdControl) -- Incarnation: Guardian of Ursoc
	AddFlags(102560, IsDruid + IsCrowdControl) -- Incarnation: Chosen of Elune
	AddFlags(202244, IsDruid + IsCrowdControl) -- Overrun (pvp honor talent)
	AddFlags(209749, IsDruid + IsCrowdControl + IsDisarm) -- Faerie Swarm (pvp honor talent)
end 

-- Hunter
do 
	AddFlags(117526, IsHunter + IsCrowdControl + IsRoot) -- Binding Shot
	AddFlags(  3355, IsHunter + IsCrowdControl) -- Freezing Trap
	AddFlags( 13809, IsHunter + IsCrowdControl) -- Ice Trap 1
	AddFlags(195645, IsHunter + IsCrowdControl + IsSnare) -- Wing Clip
	AddFlags( 19386, IsHunter + IsCrowdControl) -- Wyvern Sting
	AddFlags(128405, IsHunter + IsCrowdControl + IsRoot) -- Narrow Escape
	AddFlags(201158, IsHunter + IsCrowdControl + IsRoot) -- Super Sticky Tar (root)
	AddFlags(111735, IsHunter + IsCrowdControl + IsSnare) -- Tar
	AddFlags(135299, IsHunter + IsCrowdControl + IsSnare) -- Tar Trap
	AddFlags(  5116, IsHunter + IsCrowdControl + IsSnare) -- Concussive Shot
	AddFlags(194279, IsHunter + IsCrowdControl + IsSnare) -- Caltrops
	AddFlags(206755, IsHunter + IsCrowdControl + IsSnare) -- Ranger's Net (snare)
	AddFlags(236699, IsHunter + IsCrowdControl + IsSnare) -- Super Sticky Tar (slow)
	AddFlags(213691, IsHunter + IsCrowdControl) -- Scatter Shot (pvp honor talent)
	AddFlags(186265, IsHunter + IsCrowdControl + IsImmune) -- Deterrence (aspect of the turtle)
	AddFlags( 19574, IsHunter + IsCrowdControl + IsImmuneSpell) -- Bestial Wrath (only if The Beast Within (212704) is active)
	AddFlags(190927, IsHunter + IsCrowdControl + IsRoot) -- Harpoon
	AddFlags(212331, IsHunter + IsCrowdControl + IsRoot) -- Harpoon
	AddFlags(212353, IsHunter + IsCrowdControl + IsRoot) -- Harpoon
	AddFlags(162480, IsHunter + IsCrowdControl + IsRoot) -- Steel Trap
	AddFlags(200108, IsHunter + IsCrowdControl + IsRoot) -- Ranger's Net
	AddFlags(212638, IsHunter + IsCrowdControl + IsRoot) -- Tracker's Net 
	AddFlags(224729, IsHunter + IsCrowdControl + IsSnare) -- Bursting Shot
	AddFlags(238559, IsHunter + IsCrowdControl + IsSnare) -- Bursting Shot
	AddFlags(203337, IsHunter + IsCrowdControl) -- Freezing Trap (Diamond Ice - pvp honor talent)
	AddFlags(202748, IsHunter + IsCrowdControl + IsImmune) -- Survival Tactics (pvp honor talent) (not immune, 99% damage reduction)
	AddFlags(248519, IsHunter + IsCrowdControl + IsImmuneSpell) -- Interlope (pvp honor talent)
	AddFlags(202933, IsHunter + IsCrowdControl + IsSilence) -- Spider Sting	(pvp honor talent) --this its the silence effect
	AddFlags(  5384, IsHunter + IsCrowdControl) -- Feign Death
end 

-- Hunter Pets
do 
	AddFlags( 24394, IsHunter + IsCrowdControl) -- Intimidation
	AddFlags( 50433, IsHunter + IsCrowdControl + IsSnare) -- Ankle Crack (Crocolisk)
	AddFlags( 54644, IsHunter + IsCrowdControl + IsSnare) -- Frost Breath (Chimaera)
	AddFlags( 35346, IsHunter + IsCrowdControl + IsSnare) -- Warp Time (Warp Stalker)
	AddFlags(160067, IsHunter + IsCrowdControl + IsSnare) -- Web Spray (Spider)
	AddFlags(160065, IsHunter + IsCrowdControl + IsSnare) -- Tendon Rip (Silithid)
	AddFlags( 54216, IsHunter + IsCrowdControl) -- Master's Call (root and snare immune only)
	AddFlags( 53148, IsHunter + IsCrowdControl + IsRoot) -- Charge (tenacity ability)
	AddFlags(137798, IsHunter + IsCrowdControl + IsImmuneSpell) -- Reflective Armor Plating (Direhorn)
end 

-- Mage
do 
	AddFlags( 44572, IsMage + IsCrowdControl) -- Deep Freeze
	AddFlags( 31661, IsMage + IsCrowdControl) -- Dragon's Breath
	AddFlags(   118, IsMage + IsCrowdControl) -- Polymorph
	AddFlags( 61305, IsMage + IsCrowdControl) -- Polymorph: Black Cat
	AddFlags( 61308, IsMage + IsCrowdControl) -- Polymorph: Black Cat
	AddFlags(277792, IsMage + IsCrowdControl) -- Polymorph: Bumblebee
	AddFlags(277787, IsMage + IsCrowdControl) -- Polymorph: Direhorn
	AddFlags(161354, IsMage + IsCrowdControl) -- Polymorph: Monkey
	AddFlags(161372, IsMage + IsCrowdControl) -- Polymorph: Peacock
	AddFlags(161355, IsMage + IsCrowdControl) -- Polymorph: Penguin
	AddFlags( 28272, IsMage + IsCrowdControl) -- Polymorph: Pig
	AddFlags(161353, IsMage + IsCrowdControl) -- Polymorph: Polar bear cub
	AddFlags(126819, IsMage + IsCrowdControl) -- Polymorph: Porcupine
	AddFlags( 61721, IsMage + IsCrowdControl) -- Polymorph: Rabbit
	AddFlags( 61025, IsMage + IsCrowdControl) -- Polymorph: Serpent
	AddFlags( 61780, IsMage + IsCrowdControl) -- Polymorph: Turkey
	AddFlags( 28271, IsMage + IsCrowdControl) -- Polymorph: Turtle
	AddFlags( 82691, IsMage + IsCrowdControl) -- Ring of Frost
	AddFlags(140376, IsMage + IsCrowdControl) -- Ring of Frost
	AddFlags(   122, IsMage + IsCrowdControl + IsRoot) -- Frost Nova
	AddFlags(111340, IsMage + IsCrowdControl + IsRoot) -- Ice Ward
	AddFlags(   120, IsMage + IsCrowdControl + IsSnare) -- Cone of Cold
	AddFlags(   116, IsMage + IsCrowdControl + IsSnare) -- Frostbolt
	AddFlags( 44614, IsMage + IsCrowdControl + IsSnare) -- Frostfire Bolt
	AddFlags( 31589, IsMage + IsCrowdControl + IsSnare) -- Slow
	AddFlags(    10, IsMage + IsCrowdControl + IsSnare) -- Blizzard
	AddFlags(205708, IsMage + IsCrowdControl + IsSnare) -- Chilled
	AddFlags(212792, IsMage + IsCrowdControl + IsSnare) -- Cone of Cold
	AddFlags(205021, IsMage + IsCrowdControl + IsSnare) -- Ray of Frost
	AddFlags(135029, IsMage + IsCrowdControl + IsSnare) -- Water Jet
	AddFlags( 59638, IsMage + IsCrowdControl + IsSnare) -- Frostbolt (Mirror Images)
	AddFlags(228354, IsMage + IsCrowdControl + IsSnare) -- Flurry
	AddFlags(157981, IsMage + IsCrowdControl + IsSnare) -- Blast Wave
	AddFlags(  2120, IsMage + IsCrowdControl + IsSnare) -- Flamestrike
	AddFlags(236299, IsMage + IsCrowdControl + IsSnare) -- Chrono Shift
	AddFlags( 45438, IsMage + IsCrowdControl + IsImmune) -- Ice Block
	AddFlags(198121, IsMage + IsCrowdControl + IsRoot) -- Frostbite (pvp talent)
	AddFlags(220107, IsMage + IsCrowdControl + IsRoot) -- Frostbite
	AddFlags(157997, IsMage + IsCrowdControl + IsRoot) -- Ice Nova
	AddFlags(228600, IsMage + IsCrowdControl + IsRoot) -- Glacial Spike
	AddFlags(110959, IsMage + IsCrowdControl) -- Greater Invisibility
	AddFlags(198144, IsMage + IsCrowdControl) -- Ice form (stun/knockback immune)
	AddFlags( 12042, IsMage + IsCrowdControl) -- Arcane Power
	AddFlags(198111, IsMage + IsCrowdControl + IsImmune) -- Temporal Shield (heals all damage taken after 4 sec)
end 

-- Mage Water Elemental
do 
	AddFlags( 33395, IsMage + IsCrowdControl + IsRoot) -- Freeze
end 

-- Paladin
do 
	AddFlags(105421, IsPaladin + IsCrowdControl) -- Blinding Light
	AddFlags(105593, IsPaladin + IsCrowdControl) -- Fist of Justice
	AddFlags(   853, IsPaladin + IsCrowdControl + IsStun) -- Hammer of Justice
	AddFlags( 20066, IsPaladin + IsCrowdControl) -- Repentance
	AddFlags( 31935, IsPaladin + IsCrowdControl + IsSilence) -- Avenger's Shield
	AddFlags(187219, IsPaladin + IsCrowdControl + IsSilence) -- Avenger's Shield (pvp talent)
	AddFlags(199512, IsPaladin + IsCrowdControl + IsSilence) -- Avenger's Shield (unknow use)
	AddFlags(217824, IsPaladin + IsCrowdControl + IsSilence) -- Shield of Virtue (pvp honor talent)
	AddFlags(204242, IsPaladin + IsCrowdControl + IsSnare) -- Consecration (talent Consecrated Ground)
	AddFlags(183218, IsPaladin + IsCrowdControl + IsSnare) -- Hand of Hindrance
	AddFlags(   642, IsPaladin + IsCrowdControl + IsImmune) -- Divine Shield
	AddFlags(184662, IsPaladin + IsCrowdControl) -- Shield of Vengeance
	AddFlags( 31821, IsPaladin + IsCrowdControl) -- Aura Mastery
	AddFlags(  1022, IsPaladin + IsCrowdControl + IsImmunePhysical) -- Hand of Protection
	AddFlags(204018, IsPaladin + IsCrowdControl + IsImmuneSpell) -- Blessing of Spellwarding
	AddFlags(228050, IsPaladin + IsCrowdControl + IsImmune) -- Divine Shield (Guardian of the Forgotten Queen)
	AddFlags(205273, IsPaladin + IsCrowdControl + IsSnare) -- Wake of Ashes (artifact trait) (snare)
	AddFlags(205290, IsPaladin + IsCrowdControl + IsStun) -- Wake of Ashes (artifact trait) (stun)
	AddFlags(199448, IsPaladin + IsCrowdControl + IsImmune) -- Blessing of Sacrifice (pvp talent, 100% damage transfered to paladin)
end 

-- Priest
do 
	AddFlags(   605, IsPriest + IsCrowdControl) -- Dominate Mind
	AddFlags( 64044, IsPriest + IsCrowdControl) -- Psychic Horror
	AddFlags(  8122, IsPriest + IsCrowdControl) -- Psychic Scream
	AddFlags(  9484, IsPriest + IsCrowdControl) -- Shackle Undead
	AddFlags( 87204, IsPriest + IsCrowdControl) -- Sin and Punishment
	AddFlags( 15487, IsPriest + IsCrowdControl + IsSilence) -- Silence
	AddFlags( 64058, IsPriest + IsCrowdControl + IsDisarm) -- Psychic Horror
	AddFlags( 87194, IsPriest + IsCrowdControl + IsRoot) -- Glyph of Mind Blast
	AddFlags(114404, IsPriest + IsCrowdControl + IsRoot) -- Void Tendril's Grasp
	AddFlags( 15407, IsPriest + IsCrowdControl + IsSnare) -- Mind Flay
	AddFlags( 47585, IsPriest + IsCrowdControl + IsImmune) -- Dispersion
	AddFlags( 47788, IsPriest + IsCrowdControl) -- Guardian Spirit (prevent the target from dying)
	AddFlags(213602, IsPriest + IsCrowdControl + IsImmune) -- Greater Fade (pvp honor talent - protects vs spells. melee, ranged attacks + 50% speed)
	AddFlags(232707, IsPriest + IsCrowdControl + IsImmune) -- Ray of Hope (pvp honor talent - not immune, only delay damage and heal)
	AddFlags(213610, IsPriest + IsCrowdControl) -- Holy Ward (pvp honor talent - wards against the next loss of control effect)
	AddFlags(226943, IsPriest + IsCrowdControl) -- Mind Bomb
	AddFlags(200196, IsPriest + IsCrowdControl) -- Holy Word: Chastise
	AddFlags(200200, IsPriest + IsCrowdControl) -- Holy Word: Chastise (talent)
	AddFlags(204263, IsPriest + IsCrowdControl + IsSnare) -- Shining Force
	AddFlags(199845, IsPriest + IsCrowdControl + IsSnare) -- Psyflay (pvp honor talent - Psyfiend)
	AddFlags(210979, IsPriest + IsCrowdControl + IsSnare) -- Focus in the Light (artifact trait)
end 

-- Rogue
do 
	AddFlags(  2094, IsRogue + IsCrowdControl) -- Blind
	AddFlags(  1833, IsRogue + IsCrowdControl) -- Cheap Shot
	AddFlags(  1776, IsRogue + IsCrowdControl) -- Gouge
	AddFlags(   408, IsRogue + IsCrowdControl + IsStun) -- Kidney Shot
	AddFlags(  6770, IsRogue + IsCrowdControl) -- Sap
	AddFlags(196958, IsRogue + IsCrowdControl) -- Strike from the Shadows (stun effect)
	AddFlags(  1330, IsRogue + IsCrowdControl + IsSilence) -- Garrote - Silence
	AddFlags(  3409, IsRogue + IsCrowdControl + IsSnare) -- Crippling Poison
	AddFlags( 26679, IsRogue + IsCrowdControl + IsSnare) -- Deadly Throw
	AddFlags(185763, IsRogue + IsCrowdControl + IsSnare) -- Pistol Shot
	AddFlags(185778, IsRogue + IsCrowdControl + IsSnare) -- Shellshocked
	AddFlags(206760, IsRogue + IsCrowdControl + IsSnare) -- Night Terrors
	AddFlags(222775, IsRogue + IsCrowdControl + IsSnare) -- Strike from the Shadows (daze effect)
	AddFlags(152150, IsRogue + IsCrowdControl + IsImmune) -- Death from Above (in the air you are immune to CC)
	AddFlags( 31224, IsRogue + IsCrowdControl + IsImmuneSpell) -- Cloak of Shadows
	AddFlags( 51690, IsRogue + IsCrowdControl) -- Killing Spree
	AddFlags( 13750, IsRogue + IsCrowdControl) -- Adrenaline Rush
	AddFlags(199754, IsRogue + IsCrowdControl) -- Riposte
	AddFlags(  1966, IsRogue + IsCrowdControl) -- Feint
	AddFlags( 45182, IsRogue + IsCrowdControl) -- Cheating Death
	AddFlags(  5277, IsRogue + IsCrowdControl) -- Evasion
	AddFlags(212183, IsRogue + IsCrowdControl) -- Smoke Bomb
	AddFlags(199804, IsRogue + IsCrowdControl) -- Between the eyes
	AddFlags(199740, IsRogue + IsCrowdControl) -- Bribe
	AddFlags(207777, IsRogue + IsCrowdControl + IsDisarm) -- Dismantle
	AddFlags(185767, IsRogue + IsCrowdControl + IsSnare) -- Cannonball Barrage
	AddFlags(207736, IsRogue + IsCrowdControl) -- Shadowy Duel
	AddFlags(212150, IsRogue + IsCrowdControl) -- Cheap Tricks (pvp honor talent) (-75%  melee & range physical hit chance)
	AddFlags(199743, IsRogue + IsCrowdControl) -- Parley
	AddFlags(198222, IsRogue + IsCrowdControl + IsSnare) -- System Shock (pvp honor talent) (90% slow)
	AddFlags(226364, IsRogue + IsCrowdControl) -- Evasion (Shadow Swiftness, artifact trait)
	AddFlags(209786, IsRogue + IsCrowdControl + IsSnare) -- Goremaw's Bite (artifact trait)
end

-- Shaman
do 
	AddFlags( 77505, IsShaman + IsCrowdControl) -- Earthquake
	AddFlags( 51514, IsShaman + IsCrowdControl) -- Hex
	AddFlags(210873, IsShaman + IsCrowdControl) -- Hex (compy)
	AddFlags(211010, IsShaman + IsCrowdControl) -- Hex (snake)
	AddFlags(211015, IsShaman + IsCrowdControl) -- Hex (cockroach)
	AddFlags(211004, IsShaman + IsCrowdControl) -- Hex (spider)
	AddFlags(196942, IsShaman + IsCrowdControl) -- Hex (Voodoo Totem)
	AddFlags(269352, IsShaman + IsCrowdControl) -- Hex (skeletal hatchling)
	AddFlags(277778, IsShaman + IsCrowdControl) -- Hex (zandalari Tendonripper)
	AddFlags(277784, IsShaman + IsCrowdControl) -- Hex (wicker mongrel)
	AddFlags(118905, IsShaman + IsCrowdControl) -- Static Charge (Capacitor Totem)
	AddFlags( 64695, IsShaman + IsCrowdControl + IsRoot) -- Earthgrab (Earthgrab Totem)
	AddFlags(  3600, IsShaman + IsCrowdControl + IsSnare) -- Earthbind (Earthbind Totem)
	AddFlags(116947, IsShaman + IsCrowdControl + IsSnare) -- Earthbind (Earthgrab Totem)
	AddFlags( 77478, IsShaman + IsCrowdControl + IsSnare) -- Earthquake (Glyph of Unstable Earth)
	AddFlags(  8056, IsShaman + IsCrowdControl + IsSnare) -- Frost Shock
	AddFlags(196840, IsShaman + IsCrowdControl + IsSnare) -- Frost Shock
	AddFlags( 51490, IsShaman + IsCrowdControl + IsSnare) -- Thunderstorm
	AddFlags(147732, IsShaman + IsCrowdControl + IsSnare) -- Frostbrand Attack
	AddFlags(197385, IsShaman + IsCrowdControl + IsSnare) -- Fury of Air
	AddFlags(207498, IsShaman + IsCrowdControl) -- Ancestral Protection (prevent the target from dying)
	AddFlags(  8178, IsShaman + IsCrowdControl + IsImmuneSpell) -- Grounding Totem Effect (Grounding Totem)
	AddFlags(204399, IsShaman + IsCrowdControl) -- Earthfury (PvP Talent)
	AddFlags(192058, IsShaman + IsCrowdControl) -- Lightning Surge totem (capacitor totem)
	AddFlags(210918, IsShaman + IsCrowdControl + IsImmunePhysical) -- Ethereal Form
	AddFlags(204437, IsShaman + IsCrowdControl) -- Lightning Lasso
	AddFlags(197214, IsShaman + IsCrowdControl + IsRoot) -- Sundering
	AddFlags(224126, IsShaman + IsCrowdControl + IsSnare) -- Frozen Bite (Doom Wolves, artifact trait)
	AddFlags(207654, IsShaman + IsCrowdControl + IsImmune) -- Servant of the Queen (not immune, 80% damage reduction - artifact trait)
end 

-- Shaman Pets
do 
	AddFlags(118345, IsShaman + IsCrowdControl) -- Pulverize (Shaman Primal Earth Elemental)
	AddFlags(157375, IsShaman + IsCrowdControl) -- Gale Force (Primal Storm Elemental)
end 

-- Warlock
do 
	AddFlags(   710, IsWarlock + IsCrowdControl) -- Banish
	AddFlags(  5782, IsWarlock + IsCrowdControl) -- Fear
	AddFlags(118699, IsWarlock + IsCrowdControl) -- Fear
	AddFlags(130616, IsWarlock + IsCrowdControl) -- Fear (Glyph of Fear)
	AddFlags(  5484, IsWarlock + IsCrowdControl) -- Howl of Terror
	AddFlags( 22703, IsWarlock + IsCrowdControl) -- Infernal Awakening
	AddFlags(  6789, IsWarlock + IsCrowdControl) -- Mortal Coil
	AddFlags( 30283, IsWarlock + IsCrowdControl) -- Shadowfury
	AddFlags( 31117, IsWarlock + IsCrowdControl + IsSilence) -- Unstable Affliction
	AddFlags(196364, IsWarlock + IsCrowdControl + IsSilence) -- Unstable Affliction
	AddFlags(110913, IsWarlock + IsCrowdControl) -- Dark Bargain
	AddFlags(104773, IsWarlock + IsCrowdControl) -- Unending Resolve
	AddFlags(212295, IsWarlock + IsCrowdControl + IsImmuneSpell) -- Netherward (reflects spells)
	AddFlags(233582, IsWarlock + IsCrowdControl + IsRoot) -- Entrenched in Flame (pvp honor talent)
end 

-- Warlock Pets
do 
	AddFlags( 32752, IsWarlock + IsCrowdControl) -- Summoning Disorientation
	AddFlags( 89766, IsWarlock + IsCrowdControl) -- Axe Toss (Felguard/Wrathguard)
	AddFlags(115268, IsWarlock + IsCrowdControl) -- Mesmerize (Shivarra)
	AddFlags(  6358, IsWarlock + IsCrowdControl) -- Seduction (Succubus)
	AddFlags(171017, IsWarlock + IsCrowdControl) -- Meteor Strike (infernal)
	AddFlags(171018, IsWarlock + IsCrowdControl) -- Meteor Strike (abisal)
	AddFlags(213688, IsWarlock + IsCrowdControl) -- Fel Cleave (Fel Lord - PvP Talent)
	AddFlags(170996, IsWarlock + IsCrowdControl + IsSnare) -- Debilitate (Terrorguard)
	AddFlags(170995, IsWarlock + IsCrowdControl + IsSnare) -- Cripple (Doomguard)
end 

-- Warrior
do 
	AddFlags(118895, IsWarrior + IsCrowdControl) -- Dragon Roar
	AddFlags(  5246, IsWarrior + IsCrowdControl) -- Intimidating Shout (aoe)
	AddFlags(132168, IsWarrior + IsCrowdControl) -- Shockwave
	AddFlags(107570, IsWarrior + IsCrowdControl) -- Storm Bolt
	AddFlags(132169, IsWarrior + IsCrowdControl) -- Storm Bolt
	AddFlags( 46968, IsWarrior + IsCrowdControl) -- Shockwave
	AddFlags(213427, IsWarrior + IsCrowdControl) -- Charge Stun Talent (Warbringer)
	AddFlags(  7922, IsWarrior + IsCrowdControl) -- Charge Stun Talent (Warbringer)
	AddFlags(237744, IsWarrior + IsCrowdControl) -- Charge Stun Talent (Warbringer)
	AddFlags(107566, IsWarrior + IsCrowdControl + IsRoot) -- Staggering Shout
	AddFlags(105771, IsWarrior + IsCrowdControl + IsRoot) -- Charge (root)
	AddFlags(236027, IsWarrior + IsCrowdControl + IsSnare) -- Charge (snare)
	AddFlags(147531, IsWarrior + IsCrowdControl + IsSnare) -- Bloodbath
	AddFlags(  1715, IsWarrior + IsCrowdControl + IsSnare) -- Hamstring
	AddFlags( 12323, IsWarrior + IsCrowdControl + IsSnare) -- Piercing Howl
	AddFlags(  6343, IsWarrior + IsCrowdControl + IsSnare) -- Thunder Clap
	AddFlags( 46924, IsWarrior + IsCrowdControl + IsImmune) -- Bladestorm (not immune to dmg, only to LoC)
	AddFlags(227847, IsWarrior + IsCrowdControl + IsImmune) -- Bladestorm (not immune to dmg, only to LoC)
	AddFlags(199038, IsWarrior + IsCrowdControl + IsImmune) -- Leave No Man Behind (not immune, 90% damage reduction)
	AddFlags(218826, IsWarrior + IsCrowdControl + IsImmune) -- Trial by Combat (warr fury artifact hidden trait) (only immune to death)
	AddFlags( 23920, IsWarrior + IsCrowdControl + IsImmuneSpell) -- Spell Reflection
	AddFlags(216890, IsWarrior + IsCrowdControl + IsImmuneSpell) -- Spell Reflection
	AddFlags(213915, IsWarrior + IsCrowdControl + IsImmuneSpell) -- Mass Spell Reflection
	AddFlags(114028, IsWarrior + IsCrowdControl + IsImmuneSpell) -- Mass Spell Reflection
	AddFlags( 18499, IsWarrior + IsCrowdControl) -- Berserker Rage
	AddFlags(118038, IsWarrior + IsCrowdControl) -- Die by the Sword
	AddFlags(198819, IsWarrior + IsCrowdControl) -- Sharpen Blade (70% heal reduction)
	AddFlags(198760, IsWarrior + IsCrowdControl + IsImmunePhysical) -- Intercept (pvp honor talent) (intercept the next ranged or melee hit)
	AddFlags(176289, IsWarrior + IsCrowdControl) -- Siegebreaker
	AddFlags(199085, IsWarrior + IsCrowdControl) -- Warpath
	AddFlags(199042, IsWarrior + IsCrowdControl + IsRoot) -- Thunderstruck
	AddFlags(236236, IsWarrior + IsCrowdControl + IsDisarm) -- Disarm (pvp honor talent - protection)
	AddFlags(236077, IsWarrior + IsCrowdControl + IsDisarm) -- Disarm (pvp honor talent)
end 

------------------------------------------------------------------------
------------------------------------------------------------------------
-- 							CLASSES
------------------------------------------------------------------------
------------------------------------------------------------------------

-- Druid
------------------------------------------------------------------------
do 
	-- Buffs
	AddFlags( 29166, IsDruid) -- Innervate
	AddFlags(102342, IsDruid) -- Ironbark
	AddFlags(106898, IsDruid) -- Stampeding Roar

	-- Abilities
	AddFlags(  1850, IsDruid) -- Dash
	AddFlags( 22812, IsDruid) -- Barkskin
	AddFlags(106951, IsDruid) -- Berserk
	AddFlags(202739, IsDruid) -- Blessing of An'she (Blessing of the Ancients)
	AddFlags(202737, IsDruid) -- Blessing of Elune (Blessing of the Ancients)
	AddFlags(145152, IsDruid) -- Bloodtalons
	AddFlags(155835, IsDruid) -- Bristling Fur
	AddFlags(135700, IsDruid) -- Clearcasting (Omen of Clarity) (Feral)
	AddFlags( 16870, IsDruid) -- Clearcasting (Omen of Clarity) (Restoration)
	AddFlags(202060, IsDruid) -- Elune's Guidance
	AddFlags( 22842, IsDruid) -- Frenzied Regeneration
	AddFlags(202770, IsDruid) -- Fury of Elune
	AddFlags(213709, IsDruid) -- Galactic Guardian
	AddFlags(213680, IsDruid) -- Guardian of Elune
	AddFlags(    99, IsDruid) -- Incapacitating Roar
	AddFlags(102560, IsDruid) -- Incarnation: Chosen of Elune
	AddFlags(102558, IsDruid) -- Incarnation: Guardian of Ursoc
	AddFlags(102543, IsDruid) -- Incarnation: King of the Jungle
	AddFlags(192081, IsDruid) -- Ironfur
	AddFlags(164547, IsDruid) -- Lunar Empowerment
	AddFlags(203123, IsDruid) -- Maim
	AddFlags(192083, IsDruid) -- Mark of Ursol
	AddFlags( 33763, IsDruid) -- Lifebloom
	AddFlags(164812, IsDruid) -- Moonfire -- NEEDS CHECK, 8921
	AddFlags(155625, IsDruid) -- Moonfire (Cat Form)
	AddFlags( 69369, IsDruid) -- Predatory Swiftness
	AddFlags(158792, IsDruid) -- Pulverize
	AddFlags(155722, IsDruid) -- Rake
	AddFlags(  8936, IsDruid) -- Regrowth
	AddFlags(   774, IsDruid) -- Rejuvenation
	AddFlags(  1079, IsDruid) -- Rip
	AddFlags( 52610, IsDruid) -- Savage Roar
	AddFlags( 78675, IsDruid) -- Solar Beam
	AddFlags(164545, IsDruid) -- Solar Empowerment
	AddFlags(191034, IsDruid) -- Starfire
	AddFlags(202347, IsDruid) -- Stellar Flare
	AddFlags(164815, IsDruid) -- Sunfire -- NEEDS CHECK, 93402
	AddFlags( 61336, IsDruid) -- Survival Instincts
	AddFlags(192090, IsDruid) -- Thrash (Bear) -- NEEDS CHECK
	AddFlags(106830, IsDruid) -- Thrash (Cat)
	AddFlags(  5217, IsDruid) -- Tiger's Fury
	AddFlags(102793, IsDruid) -- Ursol's Vortex
	AddFlags(202425, IsDruid) -- Warrior of Elune
	AddFlags( 48438, IsDruid) -- Wild Growth

	-- Talents
end 

-- Hunter
------------------------------------------------------------------------
do 
	-- Abilities
	AddFlags(131894, IsHunter) -- A Murder of Crows (Beast Mastery, Marksmanship)
	AddFlags(206505, IsHunter) -- A Murder of Crows (Survival)
	AddFlags(186257, IsHunter) -- Aspect of the Cheetah
	AddFlags(186289, IsHunter) -- Aspect of the Eagle
	AddFlags(186265, IsHunter) -- Aspect of the Turtle
	AddFlags(193530, IsHunter) -- Aspect of the Wild
	AddFlags(217200, IsHunter) -- Barbed Shot (8.0.1, previously Dire Frenzy)
	AddFlags( 19574, IsHunter) -- Bestial Wrath
	AddFlags(117526, IsHunter) -- Binding Shot (stun)
	AddFlags(117405, IsHunter) -- Binding Shot (tether)
	AddFlags(194279, IsHunter) -- Caltrops
	AddFlags(199483, IsHunter) -- Camouflage
	AddFlags(  5116, IsHunter) -- Concussive Shot
	AddFlags( 13812, IsHunter) -- Explosive Trap -- NEEDS CHECK
	AddFlags(  5384, IsHunter) -- Feign Death
	AddFlags(  3355, IsHunter) -- Freezing Trap
	AddFlags(194594, IsHunter) -- Lock and Load
	AddFlags( 34477, IsHunter) -- Misdirection
	AddFlags(201081, IsHunter) -- Mok'Nathal Tactics
	AddFlags(190931, IsHunter) -- Mongoose Fury
	AddFlags(118922, IsHunter) -- Posthaste
	AddFlags(200108, IsHunter) -- Ranger's Net
	AddFlags(118253, IsHunter) -- Serpent Sting
	AddFlags(259491, IsHunter) -- Serpent Sting (8.0.1 version) 
	AddFlags(135299, IsHunter) -- Tar Trap
	AddFlags(193526, IsHunter) -- Trueshot
	AddFlags(187131, IsHunter) -- Vulnerable
	AddFlags(269747, IsHunter) -- Wildfire Bomb (8.0.1)

	-- Talents
end 

-- Mage
------------------------------------------------------------------------
do
	-- Abilities
	AddFlags( 12042, IsMage) -- Arcane Power
	AddFlags(157981, IsMage) -- Blast Wave
	AddFlags(108843, IsMage) -- Blazing Speed
	AddFlags(205766, IsMage) -- Bone Chilling
	AddFlags(263725, IsMage) -- Clearcasting
	AddFlags(190319, IsMage) -- Combustion
	AddFlags(   120, IsMage) -- Cone of Cold
	AddFlags( 31661, IsMage) -- Dragon's Breath
	AddFlags(210134, IsMage) -- Erosion
	AddFlags(126084, IsMage) -- Fingers of Frost -- NEEDS CHECK 44544
	AddFlags(  2120, IsMage) -- Flamestrike
	AddFlags(112948, IsMage) -- Frost Bomb
	AddFlags(   122, IsMage) -- Frost Nova
	AddFlags(228600, IsMage) -- Glacial Spike
	AddFlags(110960, IsMage) -- Greater Invisibility
	AddFlags(195283, IsMage) -- Hot Streak
	AddFlags( 11426, IsMage) -- Ice Barrier
	AddFlags( 45438, IsMage) -- Ice Block
	AddFlags(108839, IsMage) -- Ice Floes
	AddFlags( 12472, IsMage) -- Icy Veins
	AddFlags( 12654, IsMage) -- Ignite
	AddFlags(    66, IsMage) -- Invisibility
	AddFlags( 44457, IsMage) -- Living Bomb
	AddFlags(114923, IsMage) -- Nether Tempest
	AddFlags(205025, IsMage) -- Presence of Mind
	AddFlags(198924, IsMage) -- Quickening
	AddFlags( 82691, IsMage) -- Ring of Frost
	AddFlags( 31589, IsMage) -- Slow
	AddFlags(   130, IsMage) -- Slow Fall

	-- Talents
end 

-- Paladin
------------------------------------------------------------------------
do
	-- Buffs
	AddFlags(257771, IsPaladin) -- Forbearance
	AddFlags( 53563, IsPaladin) -- Beacon of Light
	AddFlags(  1044, IsPaladin) -- Blessing of Freedom
	AddFlags(  1022, IsPaladin) -- Blessing of Protection
	AddFlags(  6940, IsPaladin) -- Blessing of Sacrifice
	AddFlags(204013, IsPaladin) -- Blessing of Salvation
	AddFlags(204018, IsPaladin) -- Blessing of Spellwarding

	-- Abilities
	AddFlags(204150, IsPaladin) -- Aegis of Light
	AddFlags( 31850, IsPaladin) -- Ardent Defender
	AddFlags( 31842, IsPaladin) -- Avenging Wrath (Holy)
	AddFlags( 31884, IsPaladin) -- Avenging Wrath (Protection, Retribution)
	AddFlags(105421, IsPaladin) -- Blinding Light
	AddFlags(224668, IsPaladin) -- Crusade
	AddFlags(216411, IsPaladin) -- Divine Purpose (Holy - Holy Shock)
	AddFlags(216413, IsPaladin) -- Divine Purpose (Holy - Light of Dawn)
	AddFlags(223819, IsPaladin) -- Divine Purpose (Retribution)
	AddFlags(   642, IsPaladin) -- Divine Shield
	AddFlags(220509, IsPaladin) -- Divine Steed
	AddFlags(221883, IsPaladin) -- Divine Steed
	AddFlags(221886, IsPaladin) -- Divine Steed (Blood Elf)
	AddFlags(221887, IsPaladin) -- Divine Steed (Draenei)
	AddFlags(221885, IsPaladin) -- Divine Steed (Tauren)
	AddFlags(205191, IsPaladin) -- Eye for an Eye
	AddFlags(223316, IsPaladin) -- Fervent Light
	AddFlags( 86659, IsPaladin) -- Guardian of Ancient Kings
	AddFlags(   853, IsPaladin) -- Hammer of Justice
	AddFlags(183218, IsPaladin) -- Hand of Hindrance
	AddFlags(105809, IsPaladin) -- Holy Avenger
	AddFlags( 54149, IsPaladin) -- Infusion of Light
	AddFlags(183436, IsPaladin) -- Retribution
	AddFlags(214202, IsPaladin) -- Rule of Law
	AddFlags(202273, IsPaladin) -- Seal of Light
	AddFlags(152262, IsPaladin) -- Seraphim
	AddFlags(132403, IsPaladin) -- Shield of the Righteous
	AddFlags(184662, IsPaladin) -- Shield of Vengeance
	AddFlags(209785, IsPaladin) -- The Fires of Justice

	-- Talents
end 

-- Priest
------------------------------------------------------------------------
do
	-- Abilities
	AddFlags(194384, IsPriest) -- Atonement
	AddFlags( 47585, IsPriest) -- Disperson
	AddFlags(   586, IsPriest) -- Fade
	AddFlags( 47788, IsPriest) -- Guardian Spirit
	AddFlags( 14914, IsPriest) -- Holy Fire
	AddFlags(200196, IsPriest) -- Holy Word: Chastise
	AddFlags(  1706, IsPriest) -- Levitate
	AddFlags(   605, IsPriest) -- Mind Control
	AddFlags( 33206, IsPriest) -- Pain Suppression
	AddFlags( 81782, IsPriest) -- Power Word: Barrier
	AddFlags(    17, IsPriest) -- Power Word: Shield
	AddFlags( 41635, IsPriest) -- Prayer of Mending
	AddFlags(  8122, IsPriest) -- Psychic Scream
	AddFlags( 47536, IsPriest) -- Rapture
	AddFlags(   139, IsPriest) -- Renew
	AddFlags(187464, IsPriest) -- Shadow Mend
	AddFlags(   589, IsPriest) -- Shadow Word: Pain
	AddFlags( 15487, IsPriest) -- Silence
	AddFlags(208772, IsPriest) -- Smite
	AddFlags( 15286, IsPriest) -- Vampiric Embrace
	AddFlags( 34914, IsPriest) -- Vampiric Touch
	AddFlags(227386, IsPriest) -- Voidform -- NEEDS CHECK

	-- Talents
	AddFlags(200183, IsPriest) -- Apotheosis
	AddFlags(214121, IsPriest) -- Body and Mind
	AddFlags(152118, IsPriest) -- Clarity of Will
	AddFlags( 19236, IsPriest) -- Desperate Prayer
	AddFlags(197030, IsPriest) -- Divinity
	AddFlags(205369, IsPriest) -- Mind Bomb
	AddFlags(226943, IsPriest) -- Mind Bomb (stun)
	AddFlags(204213, IsPriest) -- Purge the Wicked
	AddFlags(214621, IsPriest) -- Schism
	AddFlags(219521, IsPriest) -- Shadow Covenant
	AddFlags(124430, IsPriest) -- Shadowy Insight
	AddFlags(204263, IsPriest) -- Shining Force
	AddFlags(114255, IsPriest) -- Surge of Light -- NEEDS CHECK, 128654
	AddFlags(123254, IsPriest) -- Twist of Fate
end 

-- Rogue
------------------------------------------------------------------------
do 
	-- Abilities
	AddFlags( 13750, IsRogue) -- Adrenaline Rush
	AddFlags( 13877, IsRogue) -- Blade Flurry
	AddFlags(199740, IsRogue) -- Bribe
	AddFlags(  1833, IsRogue) -- Cheap Shot
	AddFlags( 31224, IsRogue) -- Cloak of Shadows
	AddFlags(  3409, IsRogue) -- Crippling Poison (debuff)
	AddFlags(  2818, IsRogue) -- Deadly Poison (debuff)
	AddFlags(  5277, IsRogue) -- Evasion
	AddFlags(  1966, IsRogue) -- Feint
	AddFlags(   703, IsRogue) -- Garrote
	AddFlags(  1776, IsRogue) -- Gouge
	AddFlags(   408, IsRogue) -- Kidney Shot
	AddFlags(195452, IsRogue) -- Nightblade
	AddFlags(185763, IsRogue) -- Pistol Shot
	AddFlags(199754, IsRogue) -- Riposte
	AddFlags(193356, IsRogue) -- Roll the Bones - Broadsides
	AddFlags(199600, IsRogue) -- Roll the Bones - Buried Treasure
	AddFlags(193358, IsRogue) -- Roll the Bones - Grand Melee
	AddFlags(199603, IsRogue) -- Roll the Bones - Jolly Roger
	AddFlags(193357, IsRogue) -- Roll the Bones - Shark Infested Waters
	AddFlags(193359, IsRogue) -- Roll the Bones - True Bearing
	AddFlags(  1943, IsRogue) -- Rupture
	AddFlags(121471, IsRogue) -- Shadow Blades
	AddFlags(185422, IsRogue) -- Shadow Dance
	AddFlags( 36554, IsRogue) -- Shadowstep
	AddFlags(  2983, IsRogue) -- Sprint
	AddFlags(  1784, IsRogue) -- Stealth
	AddFlags(212283, IsRogue) -- Symbols of Death
	AddFlags( 57934, IsRogue) -- Tricks of the Trade
	AddFlags(  1856, IsRogue) -- Vanish
	AddFlags( 79140, IsRogue) -- Vendetta
	--AddFlags(  8680, IsRogue) -- Wound Poison -- who cares?

	-- Talents
	AddFlags(200803, IsRogue) -- Agonizing Poison
	AddFlags(196937, IsRogue) -- Ghostly Strike
	AddFlags( 16511, IsRogue) -- Hemorrhage
	AddFlags(135345, IsRogue) -- Internal Bleeding
	AddFlags( 51690, IsRogue) -- Killing Spree
	AddFlags(137619, IsRogue) -- Marked for Death
	AddFlags(  5171, IsRogue) -- Slice and Dice
end 

-- Shaman
------------------------------------------------------------------------
do 
	-- Abilities
	AddFlags(108281, IsShaman) -- Ancestral Guidance
	AddFlags(108271, IsShaman) -- Astral Shift
	AddFlags(187878, IsShaman) -- Crash Lightning
	AddFlags(188089, IsShaman) -- Earthen Spike -- 10s duration on a 20s cooldown
	--AddFlags(118522, IsShaman) -- Elemental Blast: Critical Strike -- 10s duration on a 12s cooldown
	--AddFlags(173183, IsShaman) -- Elemental Blast: Haste -- 10s duration on a 12s cooldown
	--AddFlags(173184, IsShaman) -- Elemental Blast: Mastery -- 10s duration on a 12s cooldown
	AddFlags( 16246, IsShaman) -- Elemental Focus
	AddFlags(188838, IsShaman) -- Flame Shock (restoration)
	AddFlags(188389, IsShaman) -- Flame Shock
	AddFlags(194084, IsShaman) -- Flametongue
	AddFlags(196840, IsShaman) -- Frost Shock
	AddFlags(196834, IsShaman) -- Frostbrand
	AddFlags( 73920, IsShaman) -- Healing Rain
	AddFlags(215785, IsShaman) -- Hot Hand
	AddFlags(210714, IsShaman) -- Icefury
	AddFlags(202004, IsShaman) -- Landslide
	AddFlags( 77756, IsShaman) -- Lava Surge
	AddFlags(197209, IsShaman) -- Lightning Rod -- NEEDS CHECK
	AddFlags( 61295, IsShaman) -- Riptide
	AddFlags(268429, IsShaman) -- Searing Assault
	AddFlags( 98007, IsShaman) -- Spirit Link Totem
	AddFlags( 58875, IsShaman) -- Spirit Walk
	AddFlags( 79206, IsShaman) -- Spiritwalker's Grace
	--AddFlags(201846, IsShaman) -- Stormbringer -- see spell alert overlay, action button proc glow
	AddFlags( 51490, IsShaman) -- Thunderstorm
	AddFlags( 53390, IsShaman) -- Tidal Waves
	--AddFlags(   546, IsShaman) -- Water Walking -- TODO: show only OOC
	--AddFlags(201898, IsShaman) -- Windsong -- 20s duration on a 45s cooldown

	-- Talents
	AddFlags(114050, IsShaman) -- Ascendance (Elemental)
	AddFlags(114051, IsShaman) -- Ascendance (Enhancement)
	AddFlags(114052, IsShaman) -- Ascendance (Restoration)
	AddFlags(218825, IsShaman) -- Boulderfist
	AddFlags( 64695, IsShaman) -- Earthgrab (Totem) -- NEEDS CHECK
	AddFlags(135621, IsShaman) -- Static Charge (Lightning Surge Totem) -- NEEDS CHECK
	AddFlags(192082, IsShaman) -- Wind Rush (Totem)
end 

-- Warlock
------------------------------------------------------------------------
do
	-- Abilities
	AddFlags(   980, IsWarlock) -- Agony
	AddFlags(117828, IsWarlock) -- Backdraft
	AddFlags(111400, IsWarlock) -- Burning Rush
	AddFlags(146739, IsWarlock) -- Corruption
	AddFlags(108416, IsWarlock) -- Dark Pact
	AddFlags(205146, IsWarlock) -- Demonic Calling
	AddFlags( 48018, IsWarlock) -- Demonic Circle -- TODO show on the side as a separate thingy
	AddFlags(193396, IsWarlock) -- Demonic Empowerment
	AddFlags(171982, IsWarlock) -- Demonic Synergy -- too passive?
	AddFlags(   603, IsWarlock) -- Doom
	AddFlags(  1098, IsWarlock) -- Enslave Demon
	AddFlags(196414, IsWarlock) -- Eradication
	AddFlags( 48181, IsWarlock) -- Haunt -- NEEDS CHECK, 171788, 183357
	AddFlags( 80240, IsWarlock) -- Havoc
	AddFlags(228312, IsWarlock) -- Immolate -- NEEDS CHECK
	AddFlags(  6789, IsWarlock) -- Mortal Coil
	AddFlags(205179, IsWarlock) -- Phantom Singularity
	AddFlags(196674, IsWarlock) -- Planeswalker
	AddFlags(  5740, IsWarlock) -- Rain of Fire
	AddFlags( 27243, IsWarlock) -- Seed of Corruption
	AddFlags(205181, IsWarlock) -- Shadowflame
	AddFlags( 30283, IsWarlock) -- Shadowfury
	AddFlags( 63106, IsWarlock) -- Siphon Life
	AddFlags(205178, IsWarlock) -- Soul Effigy
	AddFlags(196098, IsWarlock) -- Soul Harvest
	--AddFlags( 20707, IsWarlock) -- Soulstone -- OOC
	--AddFlags(  5697, IsWarlock) -- Unending Breath -- OOC
	AddFlags(104773, IsWarlock) -- Unending Resolve
	AddFlags( 30108, IsWarlock) -- Unstable Affliction

	-- Talents
end

-- Warrior
------------------------------------------------------------------------
do 
	-- Abilities
	AddFlags(  1719, IsWarrior) -- Battle Cry
	AddFlags( 18499, IsWarrior) -- Berserker Rage
	AddFlags(227847, IsWarrior) -- Bladestorm
	AddFlags(105771, IsWarrior) -- Charge
	AddFlags( 97463, IsWarrior) -- Commanding Shout
	AddFlags(115767, IsWarrior) -- Deep Wounds
	AddFlags(  1160, IsWarrior) -- Demoralizing Shout
	AddFlags(118038, IsWarrior) -- Die by the Sword
	AddFlags(184362, IsWarrior) -- Enrage
	AddFlags(184364, IsWarrior) -- Enraged Regeneration
	AddFlags(204488, IsWarrior) -- Focused Rage
	AddFlags(  1715, IsWarrior) -- Hamstring
	AddFlags(190456, IsWarrior) -- Ignore Pain
	AddFlags(  5246, IsWarrior) -- Intimidating Shout
	AddFlags( 12975, IsWarrior) -- Last Stand
	AddFlags( 85739, IsWarrior) -- Meat Cleaver
	AddFlags( 12323, IsWarrior) -- Piercing Howl
	AddFlags(132404, IsWarrior) -- Shield Block
	AddFlags(   871, IsWarrior) -- Shield Wall
	AddFlags( 23920, IsWarrior) -- Spell Reflection
	AddFlags(206333, IsWarrior) -- Taste for Blood
	AddFlags(  6343, IsWarrior) -- Thunder Clap

	-- Talents
	AddFlags(107574, IsWarrior) -- Avatar
	AddFlags( 46924, IsWarrior) -- Bladestorm
	AddFlags( 12292, IsWarrior) -- Bloodbath
	AddFlags(197690, IsWarrior) -- Defensive Stance
	AddFlags(118000, IsWarrior) -- Dragon Roar
	AddFlags(207982, IsWarrior) -- Focused Rage
	AddFlags(215572, IsWarrior) -- Frothing Berserker
	AddFlags(   772, IsWarrior) -- Rend
	AddFlags( 46968, IsWarrior) -- Shockwave
	AddFlags(107570, IsWarrior) -- Storm Bolt
	AddFlags(215537, IsWarrior) -- Trauma
	--AddFlags(122510, IsWarrior) -- Ultimatum -- action button glow + spell alert overlay
	AddFlags(202573, IsWarrior) -- Vengeance: Focused Rage
	AddFlags(202547, IsWarrior) -- Vengeance: Ignore Pain
	AddFlags(215562, IsWarrior) -- War Machine
	AddFlags(215570, IsWarrior) -- Wrecking Ball
end 

------------------------------------------------------------------------
-- Taunts (tanks only)
------------------------------------------------------------------------
do 
	AddFlags( 36213, IsPlayerSpell) -- Angered Earth (SH Earth Elemental)
	AddFlags( 56222, IsPlayerSpell) -- Dark Command (DK)
	AddFlags( 57604, IsPlayerSpell) -- Death Grip (DK) -- NEEDS CHECK 49560 51399 57603
	AddFlags( 20736, IsPlayerSpell) -- Distracting Shot (HU)
	AddFlags(  6795, IsPlayerSpell) -- Growl (DR)
	AddFlags( 62124, IsPlayerSpell) -- Hand of Reckoning (Paladin)
	AddFlags(118585, IsPlayerSpell) -- Leer of the Ox (MO)
	AddFlags(114198, IsPlayerSpell) -- Mocking Banner (WR)
	AddFlags(116189, IsPlayerSpell) -- Provoke (MO)
	AddFlags(118635, IsPlayerSpell) -- Provoke (MO Black Ox Statue) -- NEEDS CHECK
	AddFlags( 62124, IsPlayerSpell) -- Reckoning (PA)
	AddFlags( 17735, IsPlayerSpell) -- Suffering (WL Voidwalker)
	AddFlags(   355, IsPlayerSpell) -- Taunt (WR)
	AddFlags(185245, IsPlayerSpell) -- Torment (Demon Hunter)
end 

------------------------------------------------------------------------
------------------------------------------------------------------------
-- 							RACIALS
------------------------------------------------------------------------
------------------------------------------------------------------------
do 
	-- Dwarf
	AddFlags( 20594, IsDwarf) -- Stoneform

	-- NightElf
	AddFlags( 58984, IsNightElf) -- Shadowmeld

	-- Orc
	AddFlags( 20572, IsOrc) -- Blood Fury (attack power)
	AddFlags( 33702, IsOrc) -- Blood Fury (spell power)
	AddFlags( 33697, IsOrc) -- Blood Fury (attack power and spell damage)

	-- Pandaren
	AddFlags(107079, IsPandaren) -- Quaking Palm

	-- Scourge
	AddFlags(  7744, IsScourge) -- Will of the Forsaken

	-- Tauren 
	AddFlags( 20549, IsTauren) -- War Stomp

	-- Troll
	AddFlags( 26297, IsTroll) -- Berserking

	-- Worgen 
	AddFlags( 68992, IsWorgen) -- Darkflight
end 

-- Sorting (don't comment out this, as it currently grabs all keys)
--[[
local frame = CreateFrame("EditBox", nil, UIParent)
frame:SetSize(400,300)
frame:SetFontObject(_G.GameFontNormal)
frame:SetPoint("CENTER")
frame:HighlightText(true)

local msg = ""
for id = 1,300000 do
	if Cache[id] then 
		msg = msg .. string.format("Cache[%6d] = IsFood|n",id)
	end  
end 

frame:SetText(msg)
]]-- 
